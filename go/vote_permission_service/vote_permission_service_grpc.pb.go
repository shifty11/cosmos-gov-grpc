// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vote_permission_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotePermissionServiceClient is the client API for VotePermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotePermissionServiceClient interface {
	GetSupportedChains(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSupportedChainsResponse, error)
	RegisterWallet(ctx context.Context, in *RegisterWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVotePermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVotePermissionsResponse, error)
	RefreshVotePermission(ctx context.Context, in *RefreshVotePermissionRequest, opts ...grpc.CallOption) (*RefreshVotePermissionResponse, error)
}

type votePermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotePermissionServiceClient(cc grpc.ClientConnInterface) VotePermissionServiceClient {
	return &votePermissionServiceClient{cc}
}

func (c *votePermissionServiceClient) GetSupportedChains(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSupportedChainsResponse, error) {
	out := new(GetSupportedChainsResponse)
	err := c.cc.Invoke(ctx, "/cosmosgov_grpc.VotePermissionService/GetSupportedChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votePermissionServiceClient) RegisterWallet(ctx context.Context, in *RegisterWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cosmosgov_grpc.VotePermissionService/RegisterWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votePermissionServiceClient) GetVotePermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVotePermissionsResponse, error) {
	out := new(GetVotePermissionsResponse)
	err := c.cc.Invoke(ctx, "/cosmosgov_grpc.VotePermissionService/GetVotePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votePermissionServiceClient) RefreshVotePermission(ctx context.Context, in *RefreshVotePermissionRequest, opts ...grpc.CallOption) (*RefreshVotePermissionResponse, error) {
	out := new(RefreshVotePermissionResponse)
	err := c.cc.Invoke(ctx, "/cosmosgov_grpc.VotePermissionService/RefreshVotePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotePermissionServiceServer is the server API for VotePermissionService service.
// All implementations must embed UnimplementedVotePermissionServiceServer
// for forward compatibility
type VotePermissionServiceServer interface {
	GetSupportedChains(context.Context, *emptypb.Empty) (*GetSupportedChainsResponse, error)
	RegisterWallet(context.Context, *RegisterWalletRequest) (*emptypb.Empty, error)
	GetVotePermissions(context.Context, *emptypb.Empty) (*GetVotePermissionsResponse, error)
	RefreshVotePermission(context.Context, *RefreshVotePermissionRequest) (*RefreshVotePermissionResponse, error)
	mustEmbedUnimplementedVotePermissionServiceServer()
}

// UnimplementedVotePermissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVotePermissionServiceServer struct {
}

func (UnimplementedVotePermissionServiceServer) GetSupportedChains(context.Context, *emptypb.Empty) (*GetSupportedChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedChains not implemented")
}
func (UnimplementedVotePermissionServiceServer) RegisterWallet(context.Context, *RegisterWalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWallet not implemented")
}
func (UnimplementedVotePermissionServiceServer) GetVotePermissions(context.Context, *emptypb.Empty) (*GetVotePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVotePermissions not implemented")
}
func (UnimplementedVotePermissionServiceServer) RefreshVotePermission(context.Context, *RefreshVotePermissionRequest) (*RefreshVotePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshVotePermission not implemented")
}
func (UnimplementedVotePermissionServiceServer) mustEmbedUnimplementedVotePermissionServiceServer() {}

// UnsafeVotePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotePermissionServiceServer will
// result in compilation errors.
type UnsafeVotePermissionServiceServer interface {
	mustEmbedUnimplementedVotePermissionServiceServer()
}

func RegisterVotePermissionServiceServer(s grpc.ServiceRegistrar, srv VotePermissionServiceServer) {
	s.RegisterService(&VotePermissionService_ServiceDesc, srv)
}

func _VotePermissionService_GetSupportedChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotePermissionServiceServer).GetSupportedChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmosgov_grpc.VotePermissionService/GetSupportedChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotePermissionServiceServer).GetSupportedChains(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotePermissionService_RegisterWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotePermissionServiceServer).RegisterWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmosgov_grpc.VotePermissionService/RegisterWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotePermissionServiceServer).RegisterWallet(ctx, req.(*RegisterWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotePermissionService_GetVotePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotePermissionServiceServer).GetVotePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmosgov_grpc.VotePermissionService/GetVotePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotePermissionServiceServer).GetVotePermissions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotePermissionService_RefreshVotePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshVotePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotePermissionServiceServer).RefreshVotePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmosgov_grpc.VotePermissionService/RefreshVotePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotePermissionServiceServer).RefreshVotePermission(ctx, req.(*RefreshVotePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotePermissionService_ServiceDesc is the grpc.ServiceDesc for VotePermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotePermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmosgov_grpc.VotePermissionService",
	HandlerType: (*VotePermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedChains",
			Handler:    _VotePermissionService_GetSupportedChains_Handler,
		},
		{
			MethodName: "RegisterWallet",
			Handler:    _VotePermissionService_RegisterWallet_Handler,
		},
		{
			MethodName: "GetVotePermissions",
			Handler:    _VotePermissionService_GetVotePermissions_Handler,
		},
		{
			MethodName: "RefreshVotePermission",
			Handler:    _VotePermissionService_RefreshVotePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vote_permission_service.proto",
}
