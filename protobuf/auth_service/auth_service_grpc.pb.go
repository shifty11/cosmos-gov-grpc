// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CosmosGovClient is the client API for CosmosGov service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosmosGovClient interface {
	TokenLogin(ctx context.Context, in *TokenLoginRequest, opts ...grpc.CallOption) (*TokenLoginResponse, error)
}

type cosmosGovClient struct {
	cc grpc.ClientConnInterface
}

func NewCosmosGovClient(cc grpc.ClientConnInterface) CosmosGovClient {
	return &cosmosGovClient{cc}
}

func (c *cosmosGovClient) TokenLogin(ctx context.Context, in *TokenLoginRequest, opts ...grpc.CallOption) (*TokenLoginResponse, error) {
	out := new(TokenLoginResponse)
	err := c.cc.Invoke(ctx, "/cosmosgov_grpc.CosmosGov/TokenLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosmosGovServer is the server API for CosmosGov service.
// All implementations must embed UnimplementedCosmosGovServer
// for forward compatibility
type CosmosGovServer interface {
	TokenLogin(context.Context, *TokenLoginRequest) (*TokenLoginResponse, error)
	mustEmbedUnimplementedCosmosGovServer()
}

// UnimplementedCosmosGovServer must be embedded to have forward compatible implementations.
type UnimplementedCosmosGovServer struct {
}

func (UnimplementedCosmosGovServer) TokenLogin(context.Context, *TokenLoginRequest) (*TokenLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenLogin not implemented")
}
func (UnimplementedCosmosGovServer) mustEmbedUnimplementedCosmosGovServer() {}

// UnsafeCosmosGovServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosmosGovServer will
// result in compilation errors.
type UnsafeCosmosGovServer interface {
	mustEmbedUnimplementedCosmosGovServer()
}

func RegisterCosmosGovServer(s grpc.ServiceRegistrar, srv CosmosGovServer) {
	s.RegisterService(&CosmosGov_ServiceDesc, srv)
}

func _CosmosGov_TokenLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmosGovServer).TokenLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmosgov_grpc.CosmosGov/TokenLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmosGovServer).TokenLogin(ctx, req.(*TokenLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CosmosGov_ServiceDesc is the grpc.ServiceDesc for CosmosGov service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CosmosGov_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmosgov_grpc.CosmosGov",
	HandlerType: (*CosmosGovServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenLogin",
			Handler:    _CosmosGov_TokenLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_service.proto",
}
